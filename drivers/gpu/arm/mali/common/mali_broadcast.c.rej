--- drivers/gpu/arm/mali/common/mali_broadcast.c
+++ drivers/gpu/arm/mali/common/mali_broadcast.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012 ARM Limited. All rights reserved.
+ * Copyright (C) 2012-2013 ARM Limited. All rights reserved.
  * 
  * This program is free software and is provided to you under the terms of the GNU General Public License version 2
  * as published by the Free Software Foundation, and any use by you of this program is subject to the terms of such GNU licence.
@@ -32,6 +32,7 @@ struct mali_bcast_unit *mali_bcast_unit_create(const _mali_osk_resource_t *resou
 	bcast_unit = _mali_osk_malloc(sizeof(struct mali_bcast_unit));
 	if (NULL == bcast_unit)
 	{
+		MALI_PRINT_ERROR(("Mali Broadcast unit: Failed to allocate memory for Broadcast unit\n"));
 		return NULL;
 	}
 
@@ -44,9 +45,11 @@ struct mali_bcast_unit *mali_bcast_unit_create(const _mali_osk_resource_t *resou
 	}
 	else
 	{
-		MALI_PRINT_ERROR(("Mali Broadcast unit: Failed to allocate memory for Broadcast unit\n"));
+		MALI_PRINT_ERROR(("Mali Broadcast unit: Failed map broadcast unit\n"));
 	}
 
+	_mali_osk_free(bcast_unit);
+
 	return NULL;
 }
 
@@ -60,19 +63,18 @@ void mali_bcast_unit_delete(struct mali_bcast_unit *bcast_unit)
 
 void mali_bcast_add_group(struct mali_bcast_unit *bcast_unit, struct mali_group *group)
 {
-	u32 core_id;
+	u32 bcast_id;
 	u32 broadcast_mask;
 
 	MALI_DEBUG_ASSERT_POINTER(bcast_unit);
 	MALI_DEBUG_ASSERT_POINTER(group);
 
-	core_id = mali_pp_core_get_id(mali_group_get_pp_core(group));
+	bcast_id = mali_pp_core_get_bcast_id(mali_group_get_pp_core(group));
+
 	broadcast_mask = bcast_unit->current_mask;
 
-	/* set the bit corresponding to the group's core's id to 1 */
-	core_id = 1 << core_id;
-	broadcast_mask |= (core_id); /* add PP core to broadcast */
-	broadcast_mask |= (core_id << 16); /* add MMU to broadcast */
+	broadcast_mask |= (bcast_id); /* add PP core to broadcast */
+	broadcast_mask |= (bcast_id << 16); /* add MMU to broadcast */
 
 	/* store mask so we can restore on reset */
 	bcast_unit->current_mask = broadcast_mask;
@@ -82,18 +84,17 @@ void mali_bcast_add_group(struct mali_bcast_unit *bcast_unit, struct mali_group
 
 void mali_bcast_remove_group(struct mali_bcast_unit *bcast_unit, struct mali_group *group)
 {
-	u32 core_id;
+	u32 bcast_id;
 	u32 broadcast_mask;
 
 	MALI_DEBUG_ASSERT_POINTER(bcast_unit);
 	MALI_DEBUG_ASSERT_POINTER(group);
 
-	core_id = mali_pp_core_get_id(mali_group_get_pp_core(group));
+	bcast_id = mali_pp_core_get_bcast_id(mali_group_get_pp_core(group));
+
 	broadcast_mask = bcast_unit->current_mask;
 
-	/* set the bit corresponding to the group's core's id to 0 */
-	core_id = 1 << core_id;
-	broadcast_mask &= ~((core_id << 16) | core_id);
+	broadcast_mask &= ~((bcast_id << 16) | bcast_id);
 
 	/* store mask so we can restore on reset */
 	bcast_unit->current_mask = broadcast_mask;
